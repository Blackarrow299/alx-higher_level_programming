Using `matrix_divided`
---------------------

Importing the function from the module:

    >>> matrix_divided = __import__('1-matrix_divided').matrix_divided

Dividing a matrix by 2:

    >>> matrix_divided([[4, 6, 8], [10, 12, 14]], 2)
    [[2.0, 3.0, 4.0], [5.0, 6.0, 7.0]]

Dividing a matrix with negative numbers:

    >>> matrix_divided([[-10, -20], [-30, -40]], 5)
    [[-2.0, -4.0], [-6.0, -8.0]]

Dividing a matrix with a large number:

    >>> matrix_divided([[1000, 2000], [3000, 4000]], 100)
    [[10.0, 20.0], [30.0, 40.0]]

Dividing a matrix with mixed integer and float numbers:

    >>> matrix_divided([[5, 7.5], [3.25, 9]], 2)
    [[2.5, 3.75], [1.62, 4.5]]

Dividing a matrix with a non-numeric value:

    >>> matrix_divided([[1, 2, 3], [4, "5", 6]], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing a non-matrix:

    >>> matrix_divided([1, 2, 3], 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Dividing a matrix with rows of different sizes:

    >>> matrix_divided([[1, 2, 3], [4, 5], [6, 7, 8]], 2)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

Dividing a matrix with a non-numeric divisor:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "2")
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

Dividing a matrix by 0:

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    	      ...
    ZeroDivisionError: division by zero